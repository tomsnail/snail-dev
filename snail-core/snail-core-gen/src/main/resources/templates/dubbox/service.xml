<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>DubboxService</name>
	<filePath>src/main/java/${packageName}/${moduleName}/dubbox/${subModuleName}</filePath>
	<fileName>${ClassName}DubboxService.java</fileName>
	<content><![CDATA[
package ${packageName}.${moduleName}.dubbox<#if subModuleName != "">.${subModuleName}</#if>;

import cn.tomsnail.snail.core.framework.validator.SnailValidator;
import cn.tomsnail.snail.core.http.RequestData;
import cn.tomsnail.snail.core.http.ResultData;
import cn.tomsnail.snail.core.log.annotation.LogPoint;
import com.alibaba.dubbo.config.annotation.Reference;
import com.alibaba.dubbo.config.annotation.Service;
import ${packageName}.${moduleName}.api.${ClassName}Mo;
import ${packageName}.${moduleName}.api.${ClassName}Service;
import ${packageName}.${moduleName}.vo.${ClassName}Vo;
import org.springframework.beans.factory.annotation.Autowired;

import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import java.util.Map;

/**
 * ${functionName}DubboxService
 * @author ${functionAuthor}
 * @version ${functionVersion}
 * @Date ${genDate}
 */
@Path("${ClassName}")
@Service
public class ${ClassName}DubboxService implements ${ClassName}Dubbox {

	@Autowired
	@Reference
	private ${ClassName}Service ${className}Service;

	@POST
	@Path("list")
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	@LogPoint
	@SnailValidator
	public ResultData<Map<String,Object>> findList(RequestData<${ClassName}Vo> ${className}MoRequestData) {
		ResultData<Map<String,Object>> resultData = new ResultData<>();
		resultData.putBody("data",${className}Service.findList(${className}MoRequestData.getBody().getModel(${ClassName}Mo.class)));
		return resultData;
	}



	@POST
	@Path("save")
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	@LogPoint
	@SnailValidator
	public ResultData<Map<String,Object>> save(RequestData<${ClassName}Vo> ${className}MoRequestData) {
		ResultData<Map<String,Object>> resultData = new ResultData<>();
		resultData.putBody("data",${className}Service.save(${className}MoRequestData.getBody().getModel(${ClassName}Mo.class)));
		return resultData;
	}



	@POST
	@Path("delete")
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	@LogPoint
	@SnailValidator
	public ResultData<Map<String,Object>> delete(RequestData<${ClassName}Vo> ${className}MoRequestData) {
		ResultData<Map<String,Object>> resultData = new ResultData<>();
		resultData.putBody("data",${className}Service.delete(${className}MoRequestData.getBody().getModel(${ClassName}Mo.class).getId()));
		return resultData;
	}


	@POST
	@Path("update")
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	@LogPoint
	@SnailValidator
	public ResultData<Map<String,Object>> update(RequestData<${ClassName}Vo> ${className}MoRequestData) {
		ResultData<Map<String,Object>> resultData = new ResultData<>();
		resultData.putBody("data",${className}Service.update(${className}MoRequestData.getBody().getModel(${ClassName}Mo.class)));
		return resultData;
	}



}

]]>
	</content>
</template>