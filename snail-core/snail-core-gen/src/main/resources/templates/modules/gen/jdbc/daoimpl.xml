<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>dao</name>
	<filePath>src/main/java/${packageName}/${moduleName}/dao/impl/${subModuleName}</filePath>
	<fileName>${ClassName}DaoImpl.java</fileName>
	<content><![CDATA[
/**
 * Copyright &copy; 2012-2016
 */
package ${packageName}.${moduleName}.dao.impl<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import cn.tomsnail.objsql.ISearchObjectSQL;
import cn.tomsnail.objsql.util.ObjectSQLFactory;

import ${packageName}.${moduleName}.dao<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Dao;
import ${packageName}.${moduleName}.model<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Dto;

/**
 * ${functionName}DAO接口
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Component
public class ${ClassName}DaoImpl  implements ${ClassName}Dao {
	
	
	@Autowired
	private ObjectSQLFactory objectSQLFactory;
	

	@Override
	public List<${ClassName}Dto> search(String name, String value) {
		ISearchObjectSQL<String, ${ClassName}Dto> searchObjectSQL = objectSQLFactory.getSearchObjectSQL(${ClassName}Dto.class);
		List<${ClassName}Dto> list=searchObjectSQL.searchLikeField(name, "%"+value+"%");
		return list;
	}

	@Override
	public List<${ClassName}Dto> listDesc(String name, String value, int start, int limit) {
		ISearchObjectSQL<String, ${ClassName}Dto> searchObjectSQL = objectSQLFactory.getSearchObjectSQL(${ClassName}Dto.class);
		List<${ClassName}Dto> list=searchObjectSQL.searchByFieldOrderDesc(name, value, null, start, limit, name);
		return list;
	}

	@Override
	public List<${ClassName}Dto> list(String name, String value) {
		ISearchObjectSQL<String, ${ClassName}Dto> searchObjectSQL = objectSQLFactory.getSearchObjectSQL(${ClassName}Dto.class);
		List<${ClassName}Dto> list=searchObjectSQL.searchByField(name, value);
		return list;
	}

	@Override
	public List<${ClassName}Dto> list(String name, String value, int start, int limit) {
		ISearchObjectSQL<String, ${ClassName}Dto> searchObjectSQL = objectSQLFactory.getSearchObjectSQL(${ClassName}Dto.class);
		List<${ClassName}Dto> list=searchObjectSQL.searchByFieldOrder(name, value, null, start, limit, name);
		return list;
	}

	@Override
	public String save(${ClassName}Dto t) {
		ISearchObjectSQL<String, ${ClassName}Dto> searchObjectSQL = objectSQLFactory.getSearchObjectSQL(${ClassName}Dto.class);
		return searchObjectSQL.save(t);
		
	}

<#list table.columnList as c>
		<#if c.isPK >
	@Override
	public void update(${ClassName}Dto t) {
		ISearchObjectSQL<String, ${ClassName}Dto> searchObjectSQL = objectSQLFactory.getSearchObjectSQL(${ClassName}Dto.class);
		searchObjectSQL.updateById(t.get${c.simpleJavaField?cap_first}(), t);
	}

	@Override
	public int delete(${ClassName}Dto t) {
		ISearchObjectSQL<String, ${ClassName}Dto> searchObjectSQL = objectSQLFactory.getSearchObjectSQL(${ClassName}Dto.class);
		return searchObjectSQL.deleteById(t.get${c.simpleJavaField?cap_first}());
	}		</#if>
</#list>

	
}]]>
	</content>
</template>